// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Exercise {
  id              String          @id @default(uuid())
  name            String          @unique
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  workouts        WorkoutsExercises[]
  workoutSets     WorkoutSet[]
  personalBests   PersonalBest[]  

  
  @@map("exercises")
}

model Program {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workouts    Workout[]
  workoutSets WorkoutSet[]

  @@map("programs")
}
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  firstName     String    
  lastName      String
  email         String    @unique
  emailVerified DateTime? 
  birthday      DateTime  @db.Date
  sessions      Session[]
  exercises     Exercise[]
  programs      Program[]
  workouts      Workout[]
  personalBests PersonalBest[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Workout {
  id          String        @id @default(uuid())
  name        String        @unique
  startedAt   DateTime?
  completedAt DateTime?
  date        DateTime      @db.Date
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       
  program     Program?      @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId   String?
  exercises   WorkoutsExercises[]
  workoutSets WorkoutSet[]

  @@map("workouts")
}

model WorkoutsExercises {
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  workout       Workout     @relation(fields:[workoutId], references:[id])
  workoutId     String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  instructions  String?
  
  @@id([workoutId, exerciseId])
  @@map("workouts_exercises")
}

model WorkoutSet {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  exerciseId  String
  exercise    Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workoutId   String
  workout     Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  programId   String?
  program     Program?  @relation(fields: [programId], references: [id], onDelete: Cascade)
  reps        Int       
  weightLbs   Float     @map("weight_lbs")

  @@map("workout_sets")
}

model PersonalBest {
  type        String      
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String         
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  exerciseId  String
  exercise    Exercise    @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  weight      Float

  @@id([exerciseId, type])
  @@map("personal_bests")
}
